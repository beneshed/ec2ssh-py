import os
import configparser
from shutil import copyfile
import asyncio
from jinja2 import Template, Environment, DictLoader
import aiobotocore


DEFAULTCONFIG = configparser.ConfigParser(allow_no_value=True, interpolation=None)
DEFAULTCONFIG['EC2SSH'] = {
    'profiles': 'default',
    'regions': 'us-east-1',
    'filters': 'instance-state-name,running',
    'anti_filters': '#'
}

DEFAULTCONFIG['TEMPLATE'] = {
    'template': ("Host {{ Tags['Name'] }}"
                "\n\tHostName {{ PrivateDnsName or PrivateIpAddress }}")
}

class EC2SSH(object):
    
    def __init__(self, marker=(10 * '#', 'EC2SSH-{}', 10 * '#'), dotfile='~/.ec2ssh'):
        self.dotfile = dotfile
        self.comment = ("# Generated by ec2sshpy\n"
                        "# Updated\n"
                        "# Section\n"
                        "##########")
        self.start_marker = ''.join([marker[0], marker[1].format('START'), marker[2]])
        self.end_marker = ''.join([marker[0], marker[1].format('END'), marker[2]])
        self.template = None
        self.filters = None
        self.anti_filters = None
        self.start_index = -1
        self.load_config()

    def load_config(self):
        config = configparser.ConfigParser(allow_no_value=True, interpolation=None)
        if os.path.isfile(os.path.expanduser(self.dotfile)):
            config.read_file(open(os.path.expanduser(self.dotfile)))
            self.profiles = config.get('EC2SSH', 'profiles').split(',')
            self.regions = config.get('EC2SSH', 'regions').split(',')
            self.filters = [tuple(x.split(',')) for x in config.get('EC2SSH', 'filters').split('|')]
            self.anti_filter = [tuple(x.split(',')) for x in config.get('EC2SSH', 'anti_filters').split('|')]
            self.raw_template = config.get('TEMPLATE', 'template').split('\n')
            template = [self.raw_template[0]] + ['\t\t{}'.format(x) for x in self.raw_template[1:]]
            self.env = Environment(
                loader=DictLoader({'default': '\n'.join(template)}),
                enable_async=True
            )
            

    def init_cmd(self):
        if not os.path.isfile(os.path.expanduser(self.dotfile)):
            with open(os.path.expanduser(self.dotfile), 'w') as sshfile:
                DEFAULTCONFIG.write(sshfile)
            copyfile(os.path.expanduser('~/.ssh/config'), os.path.expanduser('~/.ssh/config.bak'))
            with open(os.path.expanduser('~/.ssh/config'), 'r') as ssh_config_file:
                read_data = ssh_config_file.readlines()
            for index, line in enumerate(read_data):
                if line.strip() == self.start_marker:
                    self.start_index = index
                    break
            if self.start_index < 0:
                # first time file
                with open(os.path.expanduser('~/.ssh/config'), 'a+') as ssh_config_file:
                    ssh_config_file.write('\n' + self.start_marker + '\n' + self.comment + '\n' + self.end_marker)
                

    async def update_cmd(self, loop):
        self.load_config()
        to_add = []
        template = self.env.get_template('default')
        # get instances
        session = aiobotocore.get_session(loop=loop)
        async with session.create_client('ec2') as ec2:
            if len(self.filters) > 0 and len(self.filters[0]) > 1:
                resp = await ec2.describe_instances(Filters=[{'Name': x[0], 'Values': tuple(x[1:])} for x in self.filters])
            else:
                resp = await ec2.describe_instances()
            root_instances = resp.get('Reservations')
            final_instances = []
            def flatten_tags(tags):
                return {x.get('Key'): x.get('Value') for x in tags }           
            for root in root_instances:
                for instance in root.get('Instances'):
                    final_instances.append(instance)
            for instance in final_instances:
                instance['Tags'] = flatten_tags(instance['Tags'])
                server = await template.render_async(**instance)
                to_add.append(server)
        with open(os.path.expanduser('~/.ssh/config'), 'r') as ssh_config_file_read:
            data = ssh_config_file_read.readlines()
        for index, line in enumerate(data):
            if line.strip() == self.start_marker:
                self.start_index = index
                break
        data_start, data_end = data[:self.start_index + len(self.comment.split('\n')) + 1], data[self.start_index + len(self.comment.split('\n')) + 1:]
        data_middle = []
        for instance in to_add:
            data_middle.extend([instance, '\n'])
        to_write = data_start + data_middle + data_end
        with open(os.path.expanduser('~/.ssh/config'), 'w') as ssh_config_file_write:
            ssh_config_file_write.writelines(to_write)
        
                
                
